{"mappings":"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","sources":["src/main/ImmutableSet.ts","src/main/Game.ts","src/main/Timer.ts","node_modules/sudoku/dist-src/index.js","src/main/index.tsx"],"sourcesContent":["export class ImmutableSet<T> {\n  constructor(private readonly data: T[]) { }\n\n  filter(f: (t: T) => boolean): ImmutableSet<T> {\n    return new ImmutableSet(this.data.filter(f));\n  }\n\n  forEach(f: (t: T) => void): void {\n    this.data.forEach(f);\n  }\n\n  toggle(t: T): ImmutableSet<T> {\n    if (this.data.includes(t)) {\n      return new ImmutableSet(this.data.filter(e => e !== t));\n    } else {\n      return new ImmutableSet(this.data.concat(t));\n    }\n  }\n}\n","import { ImmutableSet } from \"./ImmutableSet\";\n\nexport type ValidNumber = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\nexport type Placeholders = ImmutableSet<ValidNumber>;\n\nexport class Game {\n  constructor(\n    readonly cells: Cell[],\n    readonly placeholderMode: boolean,\n    readonly difficulty: number,\n    readonly previousStates: Game[]) { }\n\n  toggleSelectedCell(row: number, col: number): Game {\n    const index = --row * 9 + --col;\n    return new Game(\n      this.cells.map((c, i) => i === index\n        ? c.toggleSelected()\n        : c.deselect()),\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates,\n    );\n  }\n\n  numberPressed(n: ValidNumber): Game {\n    if (!this.selectedCell()) return this;\n\n    const cells = validate(\n      clearUpPlaceholders(\n        this.placeholderMode,\n        this.cells.map(c => c.numberPressed(n, this.placeholderMode))\n      ));\n\n    const allFilledUp = !cells.find(c => !c.revealed && !c.playerValue);\n\n    if (allFilledUp) {\n      const allCellsValid = !cells.find(c => !c.valid);\n      if (allCellsValid) {\n        alert('win');\n      } else {\n        alert('no');\n      }\n    }\n\n    return new Game(\n      cells,\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates.concat(this),\n    );\n  }\n\n  eraseSelected(): Game {\n    return new Game(\n      this.cells.map(c => c.selected ? c.erase() : c),\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates.concat(this),\n    );\n  }\n\n  togglePlaceholderMode(): Game {\n    return new Game(\n      this.cells,\n      !this.placeholderMode,\n      this.difficulty,\n      this.previousStates,\n    );\n  }\n\n  undo(): Game {\n    if (this.previousStates.length > 0) {\n      const previous = [...this.previousStates].pop()!; // mutation\n      return previous;\n    } else {\n      return this;\n    }\n  }\n\n  selectedCell(): Cell | null {\n    return this.cells.find(c => c.selected) || null;\n  }\n}\n\n// when placing a number on a cell, clear up placeholders with that\n// number placed on the same row, col, and quadrant\nfunction clearUpPlaceholders(placeholderMode: boolean, cellsToClearUp: Cell[])\n  : Cell[] {\n  if (placeholderMode) {\n    return cellsToClearUp;\n  }\n\n  const selectedCell = cellsToClearUp.find(c => c.selected)!;\n\n  return cellsToClearUp.map(cell =>\n    isRelevant(selectedCell, cell)\n      ? cell.removePlaceholder(selectedCell.playerValue!)\n      : cell);\n}\n\nfunction validate(cellsToValidate: Cell[]): Cell[] {\n  // assumes that the only change happened on the selected cell, instead\n  // of sweeping and validating all cells\n  const selectedCell = cellsToValidate.find(c => c.selected)!;\n\n  return selectedCell.playerValue\n    ? cellsToValidate.map(cell =>\n      isRelevant(selectedCell, cell)\n        ? new Cell(\n          cell.index,\n          cell.realValue,\n          cell.revealed,\n          cell.playerValue,\n          cell.placeholders,\n          cell.selected,\n          cell.shownNumber() !== selectedCell.playerValue,\n        )\n        : cell)\n    : cellsToValidate;\n}\n\n// returns if `other` is in the same line or quadrant as `target`\nfunction isRelevant(target: Cell, other: Cell): boolean {\n  return target.index !== other.index && (\n    target.rowIndex() === other.rowIndex()\n    || target.columnIndex() === other.columnIndex()\n    || inSameQuadrant(target, other));\n}\n\nfunction inSameQuadrant(a: Cell, b: Cell): boolean {\n  const aRowQuadrant = Math.ceil(a.rowIndex() / 3);\n  const aColQuadrant = Math.ceil(a.columnIndex() / 3);\n\n  const bRowQuadrant = Math.ceil(b.rowIndex() / 3);\n  const bColQuadrant = Math.ceil(b.columnIndex() / 3);\n\n  return aRowQuadrant === bRowQuadrant\n    && aColQuadrant === bColQuadrant;\n}\n\nexport class Cell {\n  constructor(\n    readonly index: number,\n    readonly realValue: ValidNumber,\n    readonly revealed: boolean,\n    readonly playerValue: ValidNumber | null,\n    readonly placeholders: Placeholders | null,\n    readonly selected: boolean = false,\n    readonly valid: boolean = true) { }\n\n  toggleSelected(): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      this.playerValue,\n      this.placeholders,\n      !this.selected);\n  }\n\n  deselect(): Cell {\n    return this.selected ? this.toggleSelected() : this;\n  }\n\n  numberPressed(n: ValidNumber, placeholderMode: boolean): Cell {\n    if (!this.selected || this.revealed) {\n      return this;\n    } else {\n      if (placeholderMode) {\n        return new Cell(\n          this.index,\n          this.realValue,\n          this.revealed,\n          null,\n          (this.placeholders || new ImmutableSet([])).toggle(n),\n          this.selected);\n      } else {\n        return new Cell(\n          this.index,\n          this.realValue,\n          this.revealed,\n          this.playerValue === n ? null : n,\n          null,\n          this.selected);\n      }\n    }\n  }\n\n  removePlaceholder(toRemove: ValidNumber): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      this.playerValue,\n      this.placeholders ? this.placeholders.filter(n => n !== toRemove) : null,\n      this.selected);\n  }\n\n  erase(): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      null,\n      new ImmutableSet([]),\n      this.selected);\n  }\n\n  shownNumber(): number | null {\n    return this.playerValue\n      ? this.playerValue\n      : this.revealed\n        ? this.realValue\n        : null;\n  }\n\n  rowIndex(): number {\n    return Math.floor(this.index / 9) + 1;\n  }\n\n  columnIndex(): number {\n    return Math.floor(this.index % 9) + 1;\n  }\n}\n","// barf\r\nlet interval = -1;\r\nexport class Timer {\r\n  static start(): void {\r\n    let ellapsed = 0;\r\n    window.clearInterval(interval);\r\n    interval = window.setInterval(() => {\r\n      if (!document.hidden) {\r\n        ellapsed += 1;\r\n        document.getElementById('timer')!.innerHTML =\r\n          formattedTime(ellapsed);\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n\r\nfunction formattedTime(t: number): string {\r\n  const minutes = Math.floor(t / 60);\r\n  const seconds = Math.floor(t % 60);\r\n  return `${minutes}:${String(seconds).padStart(2, '0')}`\r\n}\r\n","// Sudoku Generator and Solver for node.js\n// Copyright (c) 2011 Blagovest Dachev.  All rights reserved.\n//\n// This is a port of David Bau's python  implementation:\n// http://davidbau.com/archives/2006/09/04/sudoku_generator.html\nfunction makepuzzle(board) {\n  var puzzle = [];\n  var deduced = Array(81).fill(null);\n  var order = [...Array(81).keys()];\n  shuffleArray(order);\n\n  for (var i = 0; i < order.length; i++) {\n    var pos = order[i];\n\n    if (deduced[pos] === null) {\n      puzzle.push({\n        pos: pos,\n        num: board[pos]\n      });\n      deduced[pos] = board[pos];\n      deduce(deduced);\n    }\n  }\n\n  shuffleArray(puzzle);\n\n  for (var i = puzzle.length - 1; i >= 0; i--) {\n    var e = puzzle[i];\n    removeElement(puzzle, i);\n    var rating = checkpuzzle(boardforentries(puzzle), board);\n\n    if (rating === -1) {\n      puzzle.push(e);\n    }\n  }\n\n  return boardforentries(puzzle);\n}\n\nfunction ratepuzzle(puzzle, samples) {\n  var total = 0;\n\n  for (var i = 0; i < samples; i++) {\n    var tuple = solveboard(puzzle);\n\n    if (tuple.answer === null) {\n      return -1;\n    }\n\n    total += tuple.state.length;\n  }\n\n  return total / samples;\n}\n\nfunction checkpuzzle(puzzle, board) {\n  if (board === undefined) {\n    board = null;\n  }\n\n  var tuple1 = solveboard(puzzle);\n\n  if (tuple1.answer === null) {\n    return -1;\n  }\n\n  if (board != null && !boardmatches(board, tuple1.answer)) {\n    return -1;\n  }\n\n  var difficulty = tuple1.state.length;\n  var tuple2 = solvenext(tuple1.state);\n\n  if (tuple2.answer != null) {\n    return -1;\n  }\n\n  return difficulty;\n}\n\nfunction solvepuzzle(board) {\n  return solveboard(board).answer;\n}\n\nfunction solveboard(original) {\n  var board = [].concat(original);\n  var guesses = deduce(board);\n\n  if (guesses === null) {\n    return {\n      state: [],\n      answer: board\n    };\n  }\n\n  var track = [{\n    guesses: guesses,\n    count: 0,\n    board: board\n  }];\n  return solvenext(track);\n}\n\nfunction solvenext(remembered) {\n  while (remembered.length > 0) {\n    var tuple1 = remembered.pop();\n\n    if (tuple1.count >= tuple1.guesses.length) {\n      continue;\n    }\n\n    remembered.push({\n      guesses: tuple1.guesses,\n      count: tuple1.count + 1,\n      board: tuple1.board\n    });\n    var workspace = [].concat(tuple1.board);\n    var tuple2 = tuple1.guesses[tuple1.count];\n    workspace[tuple2.pos] = tuple2.num;\n    var guesses = deduce(workspace);\n\n    if (guesses === null) {\n      return {\n        state: remembered,\n        answer: workspace\n      };\n    }\n\n    remembered.push({\n      guesses: guesses,\n      count: 0,\n      board: workspace\n    });\n  }\n\n  return {\n    state: [],\n    answer: null\n  };\n}\n\nfunction deduce(board) {\n  while (true) {\n    var stuck = true;\n    var guess = null;\n    var count = 0; // fill in any spots determined by direct conflicts\n\n    var tuple1 = figurebits(board);\n    var allowed = tuple1.allowed;\n    var needed = tuple1.needed;\n\n    for (var pos = 0; pos < 81; pos++) {\n      if (board[pos] === null) {\n        var numbers = listbits(allowed[pos]);\n\n        if (numbers.length === 0) {\n          return [];\n        } else if (numbers.length === 1) {\n          board[pos] = numbers[0];\n          stuck = false;\n        } else if (stuck) {\n          var t = numbers.map(function (val, key) {\n            return {\n              pos: pos,\n              num: val\n            };\n          });\n          var tuple2 = pickbetter(guess, count, t);\n          guess = tuple2.guess;\n          count = tuple2.count;\n        }\n      }\n    }\n\n    if (!stuck) {\n      var tuple3 = figurebits(board);\n      allowed = tuple3.allowed;\n      needed = tuple3.needed;\n    } // fill in any spots determined by elimination of other locations\n\n\n    for (var axis = 0; axis < 3; axis++) {\n      for (var x = 0; x < 9; x++) {\n        var numbers = listbits(needed[axis * 9 + x]);\n\n        for (var i = 0; i < numbers.length; i++) {\n          var n = numbers[i];\n          var bit = 1 << n;\n          var spots = [];\n\n          for (var y = 0; y < 9; y++) {\n            var pos = posfor(x, y, axis);\n\n            if (allowed[pos] & bit) {\n              spots.push(pos);\n            }\n          }\n\n          if (spots.length === 0) {\n            return [];\n          } else if (spots.length === 1) {\n            board[spots[0]] = n;\n            stuck = false;\n          } else if (stuck) {\n            var t = spots.map(function (val, key) {\n              return {\n                pos: val,\n                num: n\n              };\n            });\n            var tuple4 = pickbetter(guess, count, t);\n            guess = tuple4.guess;\n            count = tuple4.count;\n          }\n        }\n      }\n    }\n\n    if (stuck) {\n      if (guess != null) {\n        shuffleArray(guess);\n      }\n\n      return guess;\n    }\n  }\n}\n\nfunction figurebits(board) {\n  var needed = [];\n  var allowed = board.map(function (val, key) {\n    return val === null ? 511 : 0;\n  }, []);\n\n  for (var axis = 0; axis < 3; axis++) {\n    for (var x = 0; x < 9; x++) {\n      var bits = axismissing(board, x, axis);\n      needed.push(bits);\n\n      for (var y = 0; y < 9; y++) {\n        var pos = posfor(x, y, axis);\n        allowed[pos] = allowed[pos] & bits;\n      }\n    }\n  }\n\n  return {\n    allowed: allowed,\n    needed: needed\n  };\n}\n\nfunction posfor(x, y, axis) {\n  if (axis === undefined) {\n    axis = 0;\n  }\n\n  if (axis === 0) {\n    return x * 9 + y;\n  } else if (axis === 1) {\n    return y * 9 + x;\n  }\n\n  return [0, 3, 6, 27, 30, 33, 54, 57, 60][x] + [0, 1, 2, 9, 10, 11, 18, 19, 20][y];\n}\n\nfunction axisfor(pos, axis) {\n  if (axis === 0) {\n    return Math.floor(pos / 9);\n  } else if (axis === 1) {\n    return pos % 9;\n  }\n\n  return Math.floor(pos / 27) * 3 + Math.floor(pos / 3) % 3;\n}\n\nfunction axismissing(board, x, axis) {\n  var bits = 0;\n\n  for (var y = 0; y < 9; y++) {\n    var e = board[posfor(x, y, axis)];\n\n    if (e != null) {\n      bits |= 1 << e;\n    }\n  }\n\n  return 511 ^ bits;\n}\n\nfunction listbits(bits) {\n  var list = [];\n\n  for (var y = 0; y < 9; y++) {\n    if ((bits & 1 << y) != 0) {\n      list.push(y);\n    }\n  }\n\n  return list;\n}\n\nfunction allowed(board, pos) {\n  var bits = 511;\n\n  for (var axis = 0; axis < 3; axis++) {\n    var x = axisfor(pos, axis);\n    bits = bits & axismissing(board, x, axis);\n  }\n\n  return bits;\n} // TODO: make sure callers utilize the return value correctly\n\n\nfunction pickbetter(b, c, t) {\n  if (b === null || t.length < b.length) {\n    return {\n      guess: t,\n      count: 1\n    };\n  } else if (t.length > b.length) {\n    return {\n      guess: b,\n      count: c\n    };\n  } else if (randomInt(c) === 0) {\n    return {\n      guess: t,\n      count: c + 1\n    };\n  }\n\n  return {\n    guess: b,\n    count: c + 1\n  };\n}\n\nfunction boardforentries(entries) {\n  var board = Array(81).fill(null);\n\n  for (var i = 0; i < entries.length; i++) {\n    var item = entries[i];\n    var pos = item.pos;\n    var num = item.num;\n    board[pos] = num;\n  }\n\n  return board;\n}\n\nfunction boardmatches(b1, b2) {\n  for (var i = 0; i < 81; i++) {\n    if (b1[i] != b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * (max + 1));\n}\n\nfunction shuffleArray(original) {\n  // Swap each element with another randomly selected one.\n  for (var i = 0; i < original.length; i++) {\n    var j = i;\n\n    while (j === i) {\n      j = Math.floor(Math.random() * original.length);\n    }\n\n    var contents = original[i];\n    original[i] = original[j];\n    original[j] = contents;\n  }\n}\n\nfunction removeElement(array, from, to) {\n  var rest = array.slice((to || from) + 1 || array.length);\n  array.length = from < 0 ? array.length + from : from;\n  return array.push.apply(array, rest);\n}\n\n;\nmodule.exports = {\n  makepuzzle: function () {\n    return makepuzzle(solvepuzzle(Array(81).fill(null)));\n  },\n  solvepuzzle: solvepuzzle,\n  ratepuzzle: ratepuzzle,\n  posfor: posfor\n};","import { Cell, Game, ValidNumber } from './Game';\r\nimport { Timer } from './Timer';\r\n\r\nconst sudoku = require('sudoku');\r\n\r\n// all this because of the way we're dealing with the Timer, in which we don't\r\n// want to re-render the whole board every second just to update the timer, as\r\n// it'd lag the game.\r\nfunction initialRender(game: Game) {\r\n  const root = document.getElementById('root')!\r\n  root.innerHTML = '';\r\n  root.appendChild(headerContainer(game));\r\n  root.appendChild(boardContainer(game));\r\n  root.appendChild(controlsContainer(game));\r\n  root.appendChild(numpadContainer());\r\n\r\n  Timer.start();\r\n\r\n  const setCellSize = () => root.style.setProperty('--cell-size',\r\n    Math.min((document.body.clientWidth / 9) - 3, 60) + 'px');\r\n  window.addEventListener('resize', setCellSize);\r\n  setCellSize();\r\n}\r\n\r\nfunction renderGame(game: Game) {\r\n  const root = document.getElementById('root')!\r\n  root.replaceChild(\r\n    boardContainer(game),\r\n    root.querySelector('.board')!);\r\n  root.replaceChild(\r\n    controlsContainer(game),\r\n    root.querySelector('.controls')!);\r\n}\r\n\r\nfunction headerContainer(game: Game): HTMLElement {\r\n  const header = document.createElement('div');\r\n  header.className = 'header';\r\n\r\n  const difficultyContainer = document.createElement('div');\r\n  difficultyContainer.className = 'difficulty';\r\n  difficultyContainer.innerHTML = `Difficulty: ${game.difficulty}`;\r\n  header.appendChild(difficultyContainer);\r\n\r\n  const timerContainer = document.createElement('div');\r\n  timerContainer.id = 'timer';\r\n  header.appendChild(timerContainer);\r\n\r\n  return header;\r\n}\r\n\r\nfunction boardContainer(game: Game): HTMLElement {\r\n  const board = document.createElement('table');\r\n  board.className = 'board';\r\n\r\n  const selectedCell = game.selectedCell();\r\n\r\n  const rows = game.cells.reduce((trs, cell, index) => {\r\n    const rowIndex = Math.floor(index / 9) + 1;\r\n    const colIndex = Math.floor(index % 9) + 1;\r\n\r\n    const cellContainer = document.createElement('td');\r\n    cellContainer.className = 'cell';\r\n    cellContainer.dataset.row = String(rowIndex);\r\n    cellContainer.dataset.col = String(colIndex);\r\n\r\n    // when a cell is selected, highlight the row a column\r\n    if (selectedCell &&\r\n      (\r\n        rowIndex === selectedCell.rowIndex() ||\r\n        colIndex === selectedCell.columnIndex()\r\n      )) {\r\n      cellContainer.classList.add('highlighted');\r\n    }\r\n\r\n    // when a number is selected, highlight all the instances of the same number\r\n    if (selectedCell &&\r\n      cell !== selectedCell &&\r\n      cell.shownNumber() &&\r\n      cell.shownNumber() === selectedCell.shownNumber()) {\r\n      cellContainer.classList.add('sibling-selected');\r\n    }\r\n\r\n    if (cell.valid === false) {\r\n      cellContainer.classList.add('invalid');\r\n    }\r\n\r\n    if (cell.selected) {\r\n      cellContainer.classList.add('selected');\r\n    }\r\n\r\n    if (cell.revealed) {\r\n      cellContainer.classList.add('revealed');\r\n      cellContainer.innerHTML = String(cell.realValue);\r\n    } else if (cell.placeholders) {\r\n      const placeholdersContainer = document.createElement('div');\r\n      placeholdersContainer.classList.add('placeholders');\r\n\r\n      cell.placeholders.forEach(p => {\r\n        const placeholderContainer = document.createElement('div');\r\n        placeholderContainer.style.gridArea = 'a' + String(p);\r\n        placeholderContainer.innerHTML = String(p);\r\n        placeholdersContainer.appendChild(placeholderContainer);\r\n      })\r\n      cellContainer.appendChild(placeholdersContainer);\r\n    } else if (cell.playerValue) {\r\n      cellContainer.classList.add('player-value');\r\n      cellContainer.innerHTML = String(cell.playerValue);\r\n    }\r\n\r\n    const tr = trs[trs.length - 1];\r\n    tr.appendChild(cellContainer);\r\n\r\n    const newRow = colIndex === 9;\r\n    return newRow ? trs.concat(document.createElement('tr')) : trs;\r\n  }, [document.createElement('tr')] as HTMLElement[]);\r\n\r\n  rows.forEach(r => board.appendChild(r));\r\n\r\n  return board;\r\n}\r\n\r\nfunction controlsContainer(game: Game): HTMLElement {\r\n  const controls = document.createElement('div');\r\n  controls.className = 'controls';\r\n\r\n  const refreshButton = button(\r\n    reload,\r\n    `<svg viewBox=\"0 0 24 24\">\r\n      <path d=\"M20.944 12.979c-.489 4.509-4.306 8.021-8.944 8.021-2.698\r\n        0-5.112-1.194-6.763-3.075l1.245-1.633c1.283 1.645 3.276 2.708 5.518\r\n        2.708 3.526 0 6.444-2.624 6.923-6.021h-2.923l4-5.25 4\r\n        5.25h-3.056zm-15.864-1.979c.487-3.387 3.4-6 6.92-6 2.237 0 4.228 1.059\r\n        5.51 2.698l1.244-1.632c-1.65-1.876-4.061-3.066-6.754-3.066-4.632 0-8.443\r\n        3.501-8.941 8h-3.059l4 5.25 4-5.25h-2.92z\"/>\r\n    </svg>`\r\n  );\r\n  refreshButton.classList.add('refresh');\r\n  controls.appendChild(refreshButton);\r\n\r\n  controls.appendChild(button(\r\n    undo,\r\n    `<svg viewBox=\"0 0 30 31\">\r\n      <path d=\"M13.71 2.46a1 1 0 01.14 1.32l-.08.1-2.15 2.32 3.41.02a10 10 0\r\n        11-10 10 1 1 0 112 0 8 8 0 108.25-8h-.25l-3.48-.02 2.28 2.53a1 1 0 01.01\r\n        1.32l-.09.1a1 1 0 01-1.32 0l-.09-.08-3.76-4.18a1 1 0 01-.07-1.25l.08-.1\r\n        3.7-4.02a1 1 0 011.42-.06z\"></path>\r\n    </svg>`\r\n  ));\r\n\r\n  const placeholderButton = button(\r\n    togglePlaceholderMode,\r\n    `<svg viewBox=\"0 0 30 31\">\r\n      <path d=\"M25.43 4.76a5.42 5.42 0 01.19 7.52l-.18.2-13.5\r\n        13.48a.91.91 0 01-1.21.08l-.1-.08-5.07-5.08-.59 4.34 3.25-.44c.44-.05.84.2\r\n        1 .58l.03.11.02.11c.06.47-.24.91-.7 1.03l-.1.02-4.45.6a.94.94 0\r\n        01-.79-.27.92.92 0 01-.26-.65v-.13l1-7.4a.92.92 0 01.19-.44l.08-.09L17.71\r\n        4.76a5.45 5.45 0 017.72 0zm.35 20.08a1 1 0 110 2h-8.7a1 1 0\r\n        010-2h8.7zM21.4 10.18L9.43 22.13 11.3\r\n        24l11.95-11.95-1.86-1.86zm-3.23-3.23L6.2 18.91l1.92 1.91L20.07\r\n        8.86l-1.9-1.9zm3.42-1.93c-.69 0-1.35.2-1.92.56l-.15.1 5.01 5\r\n        .1-.14c.33-.5.51-1.09.55-1.7l.01-.22a3.58 3.58 0 00-3.6-3.6z\"></path>\r\n  </svg>`);\r\n  placeholderButton.classList.add(game.placeholderMode ? 'active' : 'a');\r\n  controls.appendChild(placeholderButton);\r\n\r\n  controls.appendChild(button(\r\n    erase,\r\n    `<svg viewBox=\"0 0 30 31\">\r\n      <path fill-rule=\"evenodd\" d=\"M27.13 25.11a1 1 0 01.12\r\n        2h-6.9a1 1 0 01-.11-2H27.13zM21.48 4.08l.17.14.16.15 3.76 3.76a4 4 0\r\n        01.15 5.5l-.15.16-11.32 11.32h2.04a1 1 0 011 .89v.11a1 1 0 01-.88 1H6.52a3\r\n        3 0 01-1.98-.74l-.14-.14-2.23-2.22a4 4 0 01-.15-5.5l.15-.16L16.15 4.37a4 4\r\n        0 015.33-.29zm-11.52 9.3l-6.38 6.38a2 2 0 00-.11 2.7l.11.13 2.23 2.23a1 1\r\n        0 00.58.28l.13.01h4.9l5.13-5.13-6.59-6.6zm7.87-7.82l-.14.1-.13.13-6.18\r\n        6.18 6.59 6.6 6.19-6.2a2 2 0 00.11-2.7l-.11-.12-3.77-3.76a2 2 0\r\n        00-2.56-.22z\"></path>\r\n  </svg>`));\r\n\r\n  return controls;\r\n}\r\n\r\nfunction numpadContainer() {\r\n  const container = document.createElement('div');\r\n  container.className = 'numpad';\r\n\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(n => {\r\n    const numContainer = document.createElement('div');\r\n    numContainer.innerHTML = String(n);\r\n    numContainer.onclick = () => numberPressed(n as ValidNumber);\r\n    container.appendChild(numContainer);\r\n  });\r\n\r\n  return container;\r\n}\r\n\r\nfunction button(action: () => void, svg: string): HTMLElement {\r\n  const button = document.createElement('div');\r\n  button.className = 'button';\r\n  button.innerHTML = svg;\r\n  button.onclick = action;\r\n  return button;\r\n}\r\n\r\nfunction newGame(): Game {\r\n  const puzzle = sudoku.makepuzzle() as number[];\r\n\r\n  // 0 = easiest, 5 = hardest\r\n  const difficulty = sudoku.ratepuzzle(puzzle, 4);\r\n\r\n  // the library returns null | 0-8\r\n  const solved = (sudoku.solvepuzzle(puzzle) as number[])\r\n    .map(n => n + 1) as ValidNumber[];\r\n\r\n  const cells = solved.map((n, i) =>\r\n    new Cell(i, n, puzzle[i] !== null, null, null));\r\n  return new Game(cells, false, difficulty, []);\r\n}\r\n\r\nlet game = newGame();\r\n\r\ndocument.onclick = e => {\r\n  const findCell = (e: HTMLElement, selector: string) =>\r\n    e.classList.contains('cell') && e.tagName === 'TD'\r\n      ? e\r\n      : e.parentElement\r\n        ? findCell(e.parentElement, selector)\r\n        : null;\r\n\r\n  const cell = findCell(e.target as HTMLElement, 'cell');\r\n  if (cell) {\r\n    const { row, col } = cell.dataset;\r\n    toggleSelectedCell(parseInt(row!), parseInt(col!));\r\n  }\r\n};\r\n\r\ndocument.onkeyup = e => {\r\n  if (e.key.match(/[1-9]/)) {\r\n    numberPressed(parseInt(e.key) as ValidNumber);\r\n  } else if (e.key.match(/^(1|2|3|q|w|e|a|s|d)$/) && !e.ctrlKey) {\r\n    const m: { [key: string]: ValidNumber } = {\r\n      '1': 1,\r\n      '2': 2,\r\n      '3': 3,\r\n      'q': 4,\r\n      'w': 5,\r\n      'e': 6,\r\n      'a': 7,\r\n      's': 8,\r\n      'd': 9,\r\n    };\r\n\r\n    const n = m[e.key];\r\n    m && numberPressed(n);\r\n  } else if (e.key === 'z') {\r\n    undo();\r\n  } else if (e.key === 'x') {\r\n    togglePlaceholderMode();\r\n  } else if (e.key === 'c') {\r\n    erase();\r\n  }\r\n};\r\n\r\nconst numberPressed = (n: ValidNumber) => {\r\n  game = game.numberPressed(n);\r\n  renderGame(game);\r\n};\r\n\r\nconst toggleSelectedCell = (row: number, col: number) => {\r\n  game = game.toggleSelectedCell(row, col);\r\n  renderGame(game);\r\n};\r\n\r\nconst togglePlaceholderMode = () => {\r\n  game = game.togglePlaceholderMode();\r\n  renderGame(game);\r\n}\r\n\r\nconst erase = () => {\r\n  game = game.eraseSelected();\r\n  renderGame(game);\r\n}\r\n\r\nconst undo = () => {\r\n  game = game.undo();\r\n  renderGame(game);\r\n}\r\n\r\nconst reload = () => {\r\n  game = newGame();\r\n  initialRender(game);\r\n  renderGame(game);\r\n}\r\n\r\ninitialRender(game);\r\n\r\n"],"names":["$57457c1abf3f9387$export$2b350b45376a2d61","constructor","data","filter","f","this","forEach","toggle","t","includes","e","concat","$fd5789a433dfacc7$export$985739bfa5723e08","cells","placeholderMode","difficulty","previousStates","toggleSelectedCell","row","col","index","map","c","i","toggleSelected","deselect","numberPressed","n","selectedCell","cellsToValidate","find","selected","playerValue","cell","$fd5789a433dfacc7$var$isRelevant","$fd5789a433dfacc7$export$f6f0c3fe4ec306ea","realValue","revealed","placeholders","shownNumber","$fd5789a433dfacc7$var$validate","cellsToClearUp","removePlaceholder","$fd5789a433dfacc7$var$clearUpPlaceholders","valid","alert","eraseSelected","erase","togglePlaceholderMode","undo","length","pop","target","other","rowIndex","columnIndex","a","b","aRowQuadrant","Math","ceil","aColQuadrant","bRowQuadrant","bColQuadrant","$fd5789a433dfacc7$var$inSameQuadrant","toRemove","floor","$7ee9d32d89bfd468$var$interval","$7ee9d32d89bfd468$export$c57e9b2d8b9e4de","static","ellapsed","window","clearInterval","setInterval","document","hidden","getElementById","innerHTML","minutes","seconds","String","padStart","$7ee9d32d89bfd468$var$formattedTime","$c804ba5ce8d5ac72$var$checkpuzzle","puzzle","board","undefined","tuple1","$c804ba5ce8d5ac72$var$solveboard","answer","b1","b2","$c804ba5ce8d5ac72$var$boardmatches","state","$c804ba5ce8d5ac72$var$solvenext","$c804ba5ce8d5ac72$var$solvepuzzle","original","guesses","$c804ba5ce8d5ac72$var$deduce","count","remembered","push","workspace","tuple2","pos","num","stuck","guess","$c804ba5ce8d5ac72$var$figurebits","allowed","needed","numbers","$c804ba5ce8d5ac72$var$listbits","$c804ba5ce8d5ac72$var$pickbetter","val","key","tuple3","axis","x","bit","spots","y","$c804ba5ce8d5ac72$var$posfor","tuple4","$c804ba5ce8d5ac72$var$shuffleArray","bits","$c804ba5ce8d5ac72$var$axismissing","list","max","random","$c804ba5ce8d5ac72$var$boardforentries","entries","Array","fill","item","j","contents","$c804ba5ce8d5ac72$var$removeElement","array","from","to","rest","slice","apply","$c412a6fb147a5e52$var$initialRender","game","root","appendChild","header","createElement","className","difficultyContainer","timerContainer","id","$c412a6fb147a5e52$var$headerContainer","$c412a6fb147a5e52$var$boardContainer","$c412a6fb147a5e52$var$controlsContainer","container","numContainer","onclick","$c412a6fb147a5e52$var$numberPressed","$c412a6fb147a5e52$var$numpadContainer","start","setCellSize","style","setProperty","min","body","clientWidth","addEventListener","$c412a6fb147a5e52$var$renderGame","replaceChild","querySelector","reduce","trs","colIndex","cellContainer","dataset","classList","add","placeholdersContainer","p","placeholderContainer","gridArea","r","controls","refreshButton","$c412a6fb147a5e52$var$button","$c412a6fb147a5e52$var$reload","$c412a6fb147a5e52$var$undo","placeholderButton","$c412a6fb147a5e52$var$togglePlaceholderMode","$c412a6fb147a5e52$var$erase","action","svg","$c412a6fb147a5e52$var$newGame","$c804ba5ce8d5ac72$exports","makepuzzle","ratepuzzle","solvepuzzle","deduced","order","keys","$c804ba5ce8d5ac72$var$makepuzzle","samples","total","tuple","posfor","$c412a6fb147a5e52$var$game","findCell","selector","contains","tagName","parentElement","$c412a6fb147a5e52$var$toggleSelectedCell","parseInt","onkeyup","match","ctrlKey","m","q","w","s","d"],"version":3,"file":"index.270f34dc.js.map"}