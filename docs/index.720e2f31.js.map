{"mappings":"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","sources":["src/main/ImmutableSet.ts","src/main/Game.ts","src/main/Timer.ts","node_modules/sudoku/dist-src/index.js","src/main/index.tsx"],"sourcesContent":["export class ImmutableSet<T> {\n  constructor(private readonly data: T[]) { }\n\n  filter(f: (t: T) => boolean): ImmutableSet<T> {\n    return new ImmutableSet(this.data.filter(f));\n  }\n\n  forEach(f: (t: T) => void): void {\n    this.data.forEach(f);\n  }\n\n  toggle(t: T): ImmutableSet<T> {\n    if (this.data.includes(t)) {\n      return new ImmutableSet(this.data.filter(e => e !== t));\n    } else {\n      return new ImmutableSet(this.data.concat(t));\n    }\n  }\n}\n","import { ImmutableSet } from \"./ImmutableSet\";\n\nexport type ValidNumber = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\nexport type Placeholders = ImmutableSet<ValidNumber>;\n\nexport class Game {\n  constructor(\n    readonly cells: Cell[],\n    readonly placeholderMode: boolean,\n    readonly difficulty: number,\n    readonly previousStates: Game[]) { }\n\n  toggleSelectedCell(row: number, col: number): Game {\n    const index = --row * 9 + --col;\n    return new Game(\n      this.cells.map((c, i) => i === index\n        ? c.toggleSelected()\n        : c.deselect()),\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates,\n    );\n  }\n\n  numberPressed(n: ValidNumber): Game {\n    if (!this.selectedCell()) return this;\n\n    const cells = validate(\n      clearUpPlaceholders(\n        this.placeholderMode,\n        this.cells.map(c => c.numberPressed(n, this.placeholderMode))\n      ));\n\n    const allFilledUp = !cells.find(c => !c.revealed && !c.playerValue);\n\n    if (allFilledUp) {\n      const allCellsValid = !cells.find(c => !c.valid);\n      if (allCellsValid) {\n        alert('win');\n      } else {\n        alert('no');\n      }\n    }\n\n    return new Game(\n      cells,\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates.concat(this),\n    );\n  }\n\n  eraseSelected(): Game {\n    return new Game(\n      this.cells.map(c => c.selected ? c.erase() : c),\n      this.placeholderMode,\n      this.difficulty,\n      this.previousStates.concat(this),\n    );\n  }\n\n  togglePlaceholderMode(): Game {\n    return new Game(\n      this.cells,\n      !this.placeholderMode,\n      this.difficulty,\n      this.previousStates,\n    );\n  }\n\n  undo(): Game {\n    if (this.previousStates.length > 0) {\n      const previous = [...this.previousStates].pop()!; // mutation\n      return previous;\n    } else {\n      return this;\n    }\n  }\n\n  selectedCell(): Cell | null {\n    return this.cells.find(c => c.selected) || null;\n  }\n}\n\n// when placing a number on a cell, clear up placeholders with that\n// number placed on the same row, col, and quadrant\nfunction clearUpPlaceholders(placeholderMode: boolean, cellsToClearUp: Cell[])\n  : Cell[] {\n  if (placeholderMode) {\n    return cellsToClearUp;\n  }\n\n  const selectedCell = cellsToClearUp.find(c => c.selected)!;\n\n  return cellsToClearUp.map(cell =>\n    isRelevant(selectedCell, cell)\n      ? cell.removePlaceholder(selectedCell.playerValue!)\n      : cell);\n}\n\nfunction validate(cellsToValidate: Cell[]): Cell[] {\n  // assumes that the only change happened on the selected cell, instead\n  // of sweeping and validating all cells\n  const selectedCell = cellsToValidate.find(c => c.selected)!;\n\n  return selectedCell.playerValue\n    ? cellsToValidate.map(cell =>\n      isRelevant(selectedCell, cell)\n        ? new Cell(\n          cell.index,\n          cell.realValue,\n          cell.revealed,\n          cell.playerValue,\n          cell.placeholders,\n          cell.selected,\n          cell.shownNumber() !== selectedCell.playerValue,\n        )\n        : cell)\n    : cellsToValidate;\n}\n\n// returns if `other` is in the same line or quadrant as `target`\nfunction isRelevant(target: Cell, other: Cell): boolean {\n  return target.index !== other.index && (\n    target.rowIndex() === other.rowIndex()\n    || target.columnIndex() === other.columnIndex()\n    || inSameQuadrant(target, other));\n}\n\nfunction inSameQuadrant(a: Cell, b: Cell): boolean {\n  const aRowQuadrant = Math.ceil(a.rowIndex() / 3);\n  const aColQuadrant = Math.ceil(a.columnIndex() / 3);\n\n  const bRowQuadrant = Math.ceil(b.rowIndex() / 3);\n  const bColQuadrant = Math.ceil(b.columnIndex() / 3);\n\n  return aRowQuadrant === bRowQuadrant\n    && aColQuadrant === bColQuadrant;\n}\n\nexport class Cell {\n  constructor(\n    readonly index: number,\n    readonly realValue: ValidNumber,\n    readonly revealed: boolean,\n    readonly playerValue: ValidNumber | null,\n    readonly placeholders: Placeholders | null,\n    readonly selected: boolean = false,\n    readonly valid: boolean = true) { }\n\n  toggleSelected(): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      this.playerValue,\n      this.placeholders,\n      !this.selected);\n  }\n\n  deselect(): Cell {\n    return this.selected ? this.toggleSelected() : this;\n  }\n\n  numberPressed(n: ValidNumber, placeholderMode: boolean): Cell {\n    if (!this.selected || this.revealed) {\n      return this;\n    } else {\n      if (placeholderMode) {\n        return new Cell(\n          this.index,\n          this.realValue,\n          this.revealed,\n          null,\n          (this.placeholders || new ImmutableSet([])).toggle(n),\n          this.selected);\n      } else {\n        return new Cell(\n          this.index,\n          this.realValue,\n          this.revealed,\n          this.playerValue === n ? null : n,\n          null,\n          this.selected);\n      }\n    }\n  }\n\n  removePlaceholder(toRemove: ValidNumber): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      this.playerValue,\n      this.placeholders ? this.placeholders.filter(n => n !== toRemove) : null,\n      this.selected);\n  }\n\n  erase(): Cell {\n    return new Cell(\n      this.index,\n      this.realValue,\n      this.revealed,\n      null,\n      new ImmutableSet([]),\n      this.selected);\n  }\n\n  shownNumber(): number | null {\n    return this.playerValue\n      ? this.playerValue\n      : this.revealed\n        ? this.realValue\n        : null;\n  }\n\n  rowIndex(): number {\n    return Math.floor(this.index / 9) + 1;\n  }\n\n  columnIndex(): number {\n    return Math.floor(this.index % 9) + 1;\n  }\n}\n","// barf\nexport class Timer {\n  static start(): void {\n    let ellapsed = 0;\n    window.setInterval(() => {\n      if (!document.hidden) {\n        ellapsed += 1;\n        document.getElementById('timer')!.innerHTML =\n          formattedTime(ellapsed);\n      }\n    }, 1000);\n  }\n}\n\nfunction formattedTime(t: number): string {\n  const minutes = Math.floor(t / 60);\n  const seconds = Math.floor(t % 60);\n  return `${minutes}:${String(seconds).padStart(2, '0')}`\n}\n","// Sudoku Generator and Solver for node.js\n// Copyright (c) 2011 Blagovest Dachev.  All rights reserved.\n//\n// This is a port of David Bau's python  implementation:\n// http://davidbau.com/archives/2006/09/04/sudoku_generator.html\nfunction makepuzzle(board) {\n  var puzzle = [];\n  var deduced = Array(81).fill(null);\n  var order = [...Array(81).keys()];\n  shuffleArray(order);\n\n  for (var i = 0; i < order.length; i++) {\n    var pos = order[i];\n\n    if (deduced[pos] === null) {\n      puzzle.push({\n        pos: pos,\n        num: board[pos]\n      });\n      deduced[pos] = board[pos];\n      deduce(deduced);\n    }\n  }\n\n  shuffleArray(puzzle);\n\n  for (var i = puzzle.length - 1; i >= 0; i--) {\n    var e = puzzle[i];\n    removeElement(puzzle, i);\n    var rating = checkpuzzle(boardforentries(puzzle), board);\n\n    if (rating === -1) {\n      puzzle.push(e);\n    }\n  }\n\n  return boardforentries(puzzle);\n}\n\nfunction ratepuzzle(puzzle, samples) {\n  var total = 0;\n\n  for (var i = 0; i < samples; i++) {\n    var tuple = solveboard(puzzle);\n\n    if (tuple.answer === null) {\n      return -1;\n    }\n\n    total += tuple.state.length;\n  }\n\n  return total / samples;\n}\n\nfunction checkpuzzle(puzzle, board) {\n  if (board === undefined) {\n    board = null;\n  }\n\n  var tuple1 = solveboard(puzzle);\n\n  if (tuple1.answer === null) {\n    return -1;\n  }\n\n  if (board != null && !boardmatches(board, tuple1.answer)) {\n    return -1;\n  }\n\n  var difficulty = tuple1.state.length;\n  var tuple2 = solvenext(tuple1.state);\n\n  if (tuple2.answer != null) {\n    return -1;\n  }\n\n  return difficulty;\n}\n\nfunction solvepuzzle(board) {\n  return solveboard(board).answer;\n}\n\nfunction solveboard(original) {\n  var board = [].concat(original);\n  var guesses = deduce(board);\n\n  if (guesses === null) {\n    return {\n      state: [],\n      answer: board\n    };\n  }\n\n  var track = [{\n    guesses: guesses,\n    count: 0,\n    board: board\n  }];\n  return solvenext(track);\n}\n\nfunction solvenext(remembered) {\n  while (remembered.length > 0) {\n    var tuple1 = remembered.pop();\n\n    if (tuple1.count >= tuple1.guesses.length) {\n      continue;\n    }\n\n    remembered.push({\n      guesses: tuple1.guesses,\n      count: tuple1.count + 1,\n      board: tuple1.board\n    });\n    var workspace = [].concat(tuple1.board);\n    var tuple2 = tuple1.guesses[tuple1.count];\n    workspace[tuple2.pos] = tuple2.num;\n    var guesses = deduce(workspace);\n\n    if (guesses === null) {\n      return {\n        state: remembered,\n        answer: workspace\n      };\n    }\n\n    remembered.push({\n      guesses: guesses,\n      count: 0,\n      board: workspace\n    });\n  }\n\n  return {\n    state: [],\n    answer: null\n  };\n}\n\nfunction deduce(board) {\n  while (true) {\n    var stuck = true;\n    var guess = null;\n    var count = 0; // fill in any spots determined by direct conflicts\n\n    var tuple1 = figurebits(board);\n    var allowed = tuple1.allowed;\n    var needed = tuple1.needed;\n\n    for (var pos = 0; pos < 81; pos++) {\n      if (board[pos] === null) {\n        var numbers = listbits(allowed[pos]);\n\n        if (numbers.length === 0) {\n          return [];\n        } else if (numbers.length === 1) {\n          board[pos] = numbers[0];\n          stuck = false;\n        } else if (stuck) {\n          var t = numbers.map(function (val, key) {\n            return {\n              pos: pos,\n              num: val\n            };\n          });\n          var tuple2 = pickbetter(guess, count, t);\n          guess = tuple2.guess;\n          count = tuple2.count;\n        }\n      }\n    }\n\n    if (!stuck) {\n      var tuple3 = figurebits(board);\n      allowed = tuple3.allowed;\n      needed = tuple3.needed;\n    } // fill in any spots determined by elimination of other locations\n\n\n    for (var axis = 0; axis < 3; axis++) {\n      for (var x = 0; x < 9; x++) {\n        var numbers = listbits(needed[axis * 9 + x]);\n\n        for (var i = 0; i < numbers.length; i++) {\n          var n = numbers[i];\n          var bit = 1 << n;\n          var spots = [];\n\n          for (var y = 0; y < 9; y++) {\n            var pos = posfor(x, y, axis);\n\n            if (allowed[pos] & bit) {\n              spots.push(pos);\n            }\n          }\n\n          if (spots.length === 0) {\n            return [];\n          } else if (spots.length === 1) {\n            board[spots[0]] = n;\n            stuck = false;\n          } else if (stuck) {\n            var t = spots.map(function (val, key) {\n              return {\n                pos: val,\n                num: n\n              };\n            });\n            var tuple4 = pickbetter(guess, count, t);\n            guess = tuple4.guess;\n            count = tuple4.count;\n          }\n        }\n      }\n    }\n\n    if (stuck) {\n      if (guess != null) {\n        shuffleArray(guess);\n      }\n\n      return guess;\n    }\n  }\n}\n\nfunction figurebits(board) {\n  var needed = [];\n  var allowed = board.map(function (val, key) {\n    return val === null ? 511 : 0;\n  }, []);\n\n  for (var axis = 0; axis < 3; axis++) {\n    for (var x = 0; x < 9; x++) {\n      var bits = axismissing(board, x, axis);\n      needed.push(bits);\n\n      for (var y = 0; y < 9; y++) {\n        var pos = posfor(x, y, axis);\n        allowed[pos] = allowed[pos] & bits;\n      }\n    }\n  }\n\n  return {\n    allowed: allowed,\n    needed: needed\n  };\n}\n\nfunction posfor(x, y, axis) {\n  if (axis === undefined) {\n    axis = 0;\n  }\n\n  if (axis === 0) {\n    return x * 9 + y;\n  } else if (axis === 1) {\n    return y * 9 + x;\n  }\n\n  return [0, 3, 6, 27, 30, 33, 54, 57, 60][x] + [0, 1, 2, 9, 10, 11, 18, 19, 20][y];\n}\n\nfunction axisfor(pos, axis) {\n  if (axis === 0) {\n    return Math.floor(pos / 9);\n  } else if (axis === 1) {\n    return pos % 9;\n  }\n\n  return Math.floor(pos / 27) * 3 + Math.floor(pos / 3) % 3;\n}\n\nfunction axismissing(board, x, axis) {\n  var bits = 0;\n\n  for (var y = 0; y < 9; y++) {\n    var e = board[posfor(x, y, axis)];\n\n    if (e != null) {\n      bits |= 1 << e;\n    }\n  }\n\n  return 511 ^ bits;\n}\n\nfunction listbits(bits) {\n  var list = [];\n\n  for (var y = 0; y < 9; y++) {\n    if ((bits & 1 << y) != 0) {\n      list.push(y);\n    }\n  }\n\n  return list;\n}\n\nfunction allowed(board, pos) {\n  var bits = 511;\n\n  for (var axis = 0; axis < 3; axis++) {\n    var x = axisfor(pos, axis);\n    bits = bits & axismissing(board, x, axis);\n  }\n\n  return bits;\n} // TODO: make sure callers utilize the return value correctly\n\n\nfunction pickbetter(b, c, t) {\n  if (b === null || t.length < b.length) {\n    return {\n      guess: t,\n      count: 1\n    };\n  } else if (t.length > b.length) {\n    return {\n      guess: b,\n      count: c\n    };\n  } else if (randomInt(c) === 0) {\n    return {\n      guess: t,\n      count: c + 1\n    };\n  }\n\n  return {\n    guess: b,\n    count: c + 1\n  };\n}\n\nfunction boardforentries(entries) {\n  var board = Array(81).fill(null);\n\n  for (var i = 0; i < entries.length; i++) {\n    var item = entries[i];\n    var pos = item.pos;\n    var num = item.num;\n    board[pos] = num;\n  }\n\n  return board;\n}\n\nfunction boardmatches(b1, b2) {\n  for (var i = 0; i < 81; i++) {\n    if (b1[i] != b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * (max + 1));\n}\n\nfunction shuffleArray(original) {\n  // Swap each element with another randomly selected one.\n  for (var i = 0; i < original.length; i++) {\n    var j = i;\n\n    while (j === i) {\n      j = Math.floor(Math.random() * original.length);\n    }\n\n    var contents = original[i];\n    original[i] = original[j];\n    original[j] = contents;\n  }\n}\n\nfunction removeElement(array, from, to) {\n  var rest = array.slice((to || from) + 1 || array.length);\n  array.length = from < 0 ? array.length + from : from;\n  return array.push.apply(array, rest);\n}\n\n;\nmodule.exports = {\n  makepuzzle: function () {\n    return makepuzzle(solvepuzzle(Array(81).fill(null)));\n  },\n  solvepuzzle: solvepuzzle,\n  ratepuzzle: ratepuzzle,\n  posfor: posfor\n};","import { Cell, Game, ValidNumber } from './Game';\nimport { Timer } from './Timer';\n\nconst sudoku = require('sudoku');\n\n// all this because of the way we're dealing with the Timer, in which we don't\n// want to re-render the whole board every second just to update the timer, as\n// it'd lag the game.\nfunction initialRender(game: Game) {\n  const root = document.getElementById('root')!\n  root.appendChild(headerContainer(game));\n  root.appendChild(boardContainer(game));\n  root.appendChild(controlsContainer(game));\n  root.appendChild(numpadContainer());\n\n  Timer.start();\n\n  const setCellSize = () => root.style.setProperty('--cell-size',\n    Math.min((document.body.clientWidth / 9) - 3, 60) + 'px');\n  window.addEventListener('resize', setCellSize);\n  setCellSize();\n}\n\nfunction renderGame(game: Game) {\n  const root = document.getElementById('root')!\n  root.replaceChild(\n    boardContainer(game),\n    root.querySelector('.board')!);\n  root.replaceChild(\n    controlsContainer(game),\n    root.querySelector('.controls')!);\n}\n\nfunction headerContainer(game: Game): HTMLElement {\n  const header = document.createElement('div');\n  header.className = 'header';\n\n  const difficultyContainer = document.createElement('div');\n  difficultyContainer.className = 'difficulty';\n  difficultyContainer.innerHTML = `Difficulty: ${game.difficulty}`;\n  header.appendChild(difficultyContainer);\n\n  const timerContainer = document.createElement('div');\n  timerContainer.id = 'timer';\n  header.appendChild(timerContainer);\n\n  return header;\n}\n\nfunction boardContainer(game: Game): HTMLElement {\n  const board = document.createElement('table');\n  board.className = 'board';\n\n  const selectedCell = game.selectedCell();\n\n  const rows = game.cells.reduce((trs, cell, index) => {\n    const rowIndex = Math.floor(index / 9) + 1;\n    const colIndex = Math.floor(index % 9) + 1;\n\n    const cellContainer = document.createElement('td');\n    cellContainer.className = 'cell';\n    cellContainer.dataset.row = String(rowIndex);\n    cellContainer.dataset.col = String(colIndex);\n\n    // when a cell is selected, highlight the row a column\n    if (selectedCell &&\n      (\n        rowIndex === selectedCell.rowIndex() ||\n        colIndex === selectedCell.columnIndex()\n      )) {\n      cellContainer.classList.add('highlighted');\n    }\n\n    // when a number is selected, highlight all the instances of the same number\n    if (selectedCell &&\n      cell !== selectedCell &&\n      cell.shownNumber() &&\n      cell.shownNumber() === selectedCell.shownNumber()) {\n      cellContainer.classList.add('sibling-selected');\n    }\n\n    if (cell.valid === false) {\n      cellContainer.classList.add('invalid');\n    }\n\n    if (cell.selected) {\n      cellContainer.classList.add('selected');\n    }\n\n    if (cell.revealed) {\n      cellContainer.classList.add('revealed');\n      cellContainer.innerHTML = String(cell.realValue);\n    } else if (cell.placeholders) {\n      const placeholdersContainer = document.createElement('div');\n      placeholdersContainer.classList.add('placeholders');\n\n      cell.placeholders.forEach(p => {\n        const placeholderContainer = document.createElement('div');\n        placeholderContainer.style.gridArea = 'a' + String(p);\n        placeholderContainer.innerHTML = String(p);\n        placeholdersContainer.appendChild(placeholderContainer);\n      })\n      cellContainer.appendChild(placeholdersContainer);\n    } else if (cell.playerValue) {\n      cellContainer.classList.add('player-value');\n      cellContainer.innerHTML = String(cell.playerValue);\n    }\n\n    const tr = trs[trs.length - 1];\n    tr.appendChild(cellContainer);\n\n    const newRow = colIndex === 9;\n    return newRow ? trs.concat(document.createElement('tr')) : trs;\n  }, [document.createElement('tr')] as HTMLElement[]);\n\n  rows.forEach(r => board.appendChild(r));\n\n  return board;\n}\n\nfunction controlsContainer(game: Game): HTMLElement {\n  const controls = document.createElement('div');\n  controls.className = 'controls';\n\n  controls.appendChild(button(\n    undo,\n    `<svg viewBox=\"0 0 30 31\">\n      <path d=\"M13.71 2.46a1 1 0 01.14 1.32l-.08.1-2.15 2.32 3.41.02a10 10 0\n        11-10 10 1 1 0 112 0 8 8 0 108.25-8h-.25l-3.48-.02 2.28 2.53a1 1 0 01.01\n        1.32l-.09.1a1 1 0 01-1.32 0l-.09-.08-3.76-4.18a1 1 0 01-.07-1.25l.08-.1\n        3.7-4.02a1 1 0 011.42-.06z\"></path>\n    </svg>`\n  ));\n\n  const placeholderButton = button(\n    togglePlaceholderMode,\n    `<svg viewBox=\"0 0 30 31\">\n      <path d=\"M25.43 4.76a5.42 5.42 0 01.19 7.52l-.18.2-13.5\n        13.48a.91.91 0 01-1.21.08l-.1-.08-5.07-5.08-.59 4.34 3.25-.44c.44-.05.84.2\n        1 .58l.03.11.02.11c.06.47-.24.91-.7 1.03l-.1.02-4.45.6a.94.94 0\n        01-.79-.27.92.92 0 01-.26-.65v-.13l1-7.4a.92.92 0 01.19-.44l.08-.09L17.71\n        4.76a5.45 5.45 0 017.72 0zm.35 20.08a1 1 0 110 2h-8.7a1 1 0\n        010-2h8.7zM21.4 10.18L9.43 22.13 11.3\n        24l11.95-11.95-1.86-1.86zm-3.23-3.23L6.2 18.91l1.92 1.91L20.07\n        8.86l-1.9-1.9zm3.42-1.93c-.69 0-1.35.2-1.92.56l-.15.1 5.01 5\n        .1-.14c.33-.5.51-1.09.55-1.7l.01-.22a3.58 3.58 0 00-3.6-3.6z\"></path>\n  </svg>`);\n  placeholderButton.classList.add(game.placeholderMode ? 'active' : 'a');\n  controls.appendChild(placeholderButton);\n\n  controls.appendChild(button(\n    erase,\n    `<svg viewBox=\"0 0 30 31\">\n      <path fill-rule=\"evenodd\" d=\"M27.13 25.11a1 1 0 01.12\n        2h-6.9a1 1 0 01-.11-2H27.13zM21.48 4.08l.17.14.16.15 3.76 3.76a4 4 0\n        01.15 5.5l-.15.16-11.32 11.32h2.04a1 1 0 011 .89v.11a1 1 0 01-.88 1H6.52a3\n        3 0 01-1.98-.74l-.14-.14-2.23-2.22a4 4 0 01-.15-5.5l.15-.16L16.15 4.37a4 4\n        0 015.33-.29zm-11.52 9.3l-6.38 6.38a2 2 0 00-.11 2.7l.11.13 2.23 2.23a1 1\n        0 00.58.28l.13.01h4.9l5.13-5.13-6.59-6.6zm7.87-7.82l-.14.1-.13.13-6.18\n        6.18 6.59 6.6 6.19-6.2a2 2 0 00.11-2.7l-.11-.12-3.77-3.76a2 2 0\n        00-2.56-.22z\"></path>\n  </svg>`));\n\n  return controls;\n}\n\nfunction numpadContainer() {\n  const container = document.createElement('div');\n  container.className = 'numpad';\n\n  [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(n => {\n    const numContainer = document.createElement('div');\n    numContainer.innerHTML = String(n);\n    numContainer.onclick = () => numberPressed(n as ValidNumber);\n    container.appendChild(numContainer);\n  });\n\n  return container;\n}\n\nfunction button(action: () => void, svg: string): HTMLElement {\n  const button = document.createElement('div');\n  button.className = 'button';\n  button.innerHTML = svg;\n  button.onclick = action;\n  return button;\n}\n\nfunction newGame(): Game {\n  const puzzle = sudoku.makepuzzle() as number[];\n\n  // 0 = easiest, 5 = hardest\n  const difficulty = sudoku.ratepuzzle(puzzle, 4);\n\n  // the library returns null | 0-8\n  const solved = (sudoku.solvepuzzle(puzzle) as number[])\n    .map(n => n + 1) as ValidNumber[];\n\n  const cells = solved.map((n, i) =>\n    new Cell(i, n, puzzle[i] !== null, null, null));\n  return new Game(cells, false, difficulty, []);\n}\n\nlet game = newGame();\n\ndocument.onclick = e => {\n  const findCell = (e: HTMLElement, selector: string) =>\n    e.classList.contains('cell') && e.tagName === 'TD'\n      ? e\n      : e.parentElement\n        ? findCell(e.parentElement, selector)\n        : null;\n\n  const cell = findCell(e.target as HTMLElement, 'cell');\n  if (cell) {\n    const { row, col } = cell.dataset;\n    toggleSelectedCell(parseInt(row!), parseInt(col!));\n  }\n};\n\ndocument.onkeyup = e => {\n  if (e.key.match(/[1-9]/)) {\n    numberPressed(parseInt(e.key) as ValidNumber);\n  } else if (e.key.match(/^(1|2|3|q|w|e|a|s|d)$/) && !e.ctrlKey) {\n    const m: { [key: string]: ValidNumber } = {\n      '1': 1,\n      '2': 2,\n      '3': 3,\n      'q': 4,\n      'w': 5,\n      'e': 6,\n      'a': 7,\n      's': 8,\n      'd': 9,\n    };\n\n    const n = m[e.key];\n    m && numberPressed(n);\n  } else if (e.key === 'z') {\n    undo();\n  } else if (e.key === 'x') {\n    togglePlaceholderMode();\n  } else if (e.key === 'c') {\n    erase();\n  }\n};\n\nconst numberPressed = (n: ValidNumber) => {\n  game = game.numberPressed(n);\n  renderGame(game);\n};\n\nconst toggleSelectedCell = (row: number, col: number) => {\n  game = game.toggleSelectedCell(row, col);\n  renderGame(game);\n};\n\nconst togglePlaceholderMode = () => {\n  game = game.togglePlaceholderMode();\n  renderGame(game);\n}\n\nconst erase = () => {\n  game = game.eraseSelected();\n  renderGame(game);\n}\n\nconst undo = () => {\n  game = game.undo();\n  renderGame(game);\n}\n\ninitialRender(game);\n\n"],"names":["$57457c1abf3f9387$export$2b350b45376a2d61","constructor","data","filter","f","this","forEach","toggle","t","includes","e","concat","$fd5789a433dfacc7$export$985739bfa5723e08","cells","placeholderMode","difficulty","previousStates","toggleSelectedCell","row","col","index","map","c","i","toggleSelected","deselect","numberPressed","n","selectedCell","cellsToValidate","find","selected","playerValue","cell","$fd5789a433dfacc7$var$isRelevant","$fd5789a433dfacc7$export$f6f0c3fe4ec306ea","realValue","revealed","placeholders","shownNumber","$fd5789a433dfacc7$var$validate","cellsToClearUp","removePlaceholder","$fd5789a433dfacc7$var$clearUpPlaceholders","valid","alert","eraseSelected","erase","togglePlaceholderMode","undo","length","pop","target","other","rowIndex","columnIndex","a","b","aRowQuadrant","Math","ceil","aColQuadrant","bRowQuadrant","bColQuadrant","$fd5789a433dfacc7$var$inSameQuadrant","toRemove","floor","$7ee9d32d89bfd468$export$c57e9b2d8b9e4de","static","ellapsed","window","setInterval","document","hidden","getElementById","innerHTML","minutes","seconds","String","padStart","$7ee9d32d89bfd468$var$formattedTime","$c804ba5ce8d5ac72$var$checkpuzzle","puzzle","board","undefined","tuple1","$c804ba5ce8d5ac72$var$solveboard","answer","b1","b2","$c804ba5ce8d5ac72$var$boardmatches","state","$c804ba5ce8d5ac72$var$solvenext","$c804ba5ce8d5ac72$var$solvepuzzle","original","guesses","$c804ba5ce8d5ac72$var$deduce","count","remembered","push","workspace","tuple2","pos","num","stuck","guess","$c804ba5ce8d5ac72$var$figurebits","allowed","needed","numbers","$c804ba5ce8d5ac72$var$listbits","$c804ba5ce8d5ac72$var$pickbetter","val","key","tuple3","axis","x","bit","spots","y","$c804ba5ce8d5ac72$var$posfor","tuple4","$c804ba5ce8d5ac72$var$shuffleArray","bits","$c804ba5ce8d5ac72$var$axismissing","list","max","random","$c804ba5ce8d5ac72$var$boardforentries","entries","Array","fill","item","j","contents","$c804ba5ce8d5ac72$var$removeElement","array","from","to","rest","slice","apply","$c412a6fb147a5e52$var$renderGame","game","root","replaceChild","$c412a6fb147a5e52$var$boardContainer","querySelector","$c412a6fb147a5e52$var$controlsContainer","createElement","className","reduce","trs","colIndex","cellContainer","dataset","classList","add","placeholdersContainer","p","placeholderContainer","style","gridArea","appendChild","r","controls","$c412a6fb147a5e52$var$button","$c412a6fb147a5e52$var$undo","placeholderButton","$c412a6fb147a5e52$var$togglePlaceholderMode","$c412a6fb147a5e52$var$erase","action","svg","button","onclick","$c804ba5ce8d5ac72$exports","makepuzzle","deduced","order","keys","$c804ba5ce8d5ac72$var$makepuzzle","solvepuzzle","ratepuzzle","samples","total","tuple","posfor","$c412a6fb147a5e52$var$game","$c412a6fb147a5e52$var$newGame","findCell","selector","contains","tagName","parentElement","$c412a6fb147a5e52$var$toggleSelectedCell","parseInt","onkeyup","match","$c412a6fb147a5e52$var$numberPressed","ctrlKey","m","q","w","s","d","header","difficultyContainer","timerContainer","id","$c412a6fb147a5e52$var$headerContainer","container","numContainer","$c412a6fb147a5e52$var$numpadContainer","start","setCellSize","setProperty","min","body","clientWidth","addEventListener","$c412a6fb147a5e52$var$initialRender"],"version":3,"file":"index.720e2f31.js.map"}